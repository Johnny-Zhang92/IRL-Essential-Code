### Imitation pipeline for classic control tasks ###

tasks:
  - name: cartpole
    env: CartPole-v0
    policy: expert_policies/classic/CartPole-v0.h5/snapshots/iter0000100
    cuts_off_on_success: false
    data_subsamp_freq: 10

  - name: mountaincar
    env: MountainCar-v0
    policy: expert_policies/classic/MountainCar-v0.h5/snapshots/iter0000100
    cuts_off_on_success: true
    data_subsamp_freq: 5

  - name: acrobot
    env: Acrobot-v0
    policy: expert_policies/classic/Acrobot-v0.h5/snapshots/iter0000100
    cuts_off_on_success: true
    data_subsamp_freq: 5


training:
  full_dataset_num_trajs: 10
  dataset_num_trajs: [1, 4, 7, 10]
  deterministic_expert: false
  runs: 7

  algorithms:
    # Behavioral cloning
    - name: bclone
      cmd: >
        python scripts/imitate_mj.py --mode bclone
        --env {env}
        --data {dataset}
        --limit_trajs {num_trajs}
        --data_subsamp_freq {data_subsamp_freq}
        --max_iter 1001
        --bclone_eval_freq 100
        --sim_batch_size 1
        --log {out}

    # Generative adversarial (neural network adversary)
    - name: ga
      cmd: >
        python scripts/imitate_mj.py --mode ga
        --env {env}
        --data {dataset}
        --limit_trajs {num_trajs}
        --data_subsamp_freq {data_subsamp_freq}
        --favor_zero_expert_reward {cuts_off_on_success}
        --min_total_sa 5000
        --max_iter 301
        --sim_batch_size 1
        --reward_include_time 0
        --log {out}

    # Apprenticeship learning (feature expectation matching)
    - name: fem
      cmd: >
        python scripts/imitate_mj.py --mode ga
        --env {env}
        --data {dataset}
        --limit_trajs {num_trajs}
        --data_subsamp_freq {data_subsamp_freq}
        --favor_zero_expert_reward {cuts_off_on_success}
        --min_total_sa 5000
        --max_iter 301
        --sim_batch_size 1
        --reward_type l2ball
        --reward_include_time 0
        --log {out}


    # Apprenticeship learning (finite set of adversary rewards)
    - name: simplex # "game-theoretic" apprenticeship learning
      cmd: >
        python scripts/imitate_mj.py --mode ga
        --env {env}
        --data {dataset}
        --limit_trajs {num_trajs}
        --data_subsamp_freq {data_subsamp_freq}
        --favor_zero_expert_reward {cuts_off_on_success}
        --min_total_sa 5000
        --max_iter 301
        --sim_batch_size 1
        --reward_type simplex
        --reward_include_time 0
        --log {out}


options:
  storagedir: imitation_runs/classic
  traj_subdir: trajs
  checkpt_subdir: checkpoints

  eval_num_trajs: 50
  results_filename: results.h5

  pbs:
    jobname: im_classic
    queue: atlas
    ppn: 2
